% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lpqr.R
\name{predict.lpqr}
\alias{predict.lpqr}
\title{Evaluate Local Polynomial Quantile Surfaces}
\usage{
\method{predict}{lpqr}(object, newdata = object$data, p = 1, tau = 1:9/10)
}
\arguments{
\item{object}{Object of class \code{"lpqr"} (see \code{\link{lpqr}}).}

\item{newdata}{A data frame containing at least covariate columns for which
to evaluate the regression surface(s) at.}

\item{p}{Non-negative integer; power of local polynomial
(which includes all interaction terms of that order). If you'd like more
flexibility, you can also specify
a formula here for the local regression.}

\item{tau}{Quantile indices indicating which quantile surfaces to evaluate.}
}
\value{
A matrix, with columns corresponding to the quantile
indices \code{tau}, and columns corresponding to the query points in
\code{newdata}.
}
\description{
Performs local polynomial quantile regression by evaluating the regression
surface(s) at query points (or "new data").
}
\examples{
library(ggplot2)
set.seed(123)
## Get data
x <- runif(1000)*pi
y <- abs(rnorm(1000))*sin(x)*100
z <- x + rexp(1000)*y
dat <- data.frame(x=x, y=y, z=z)
tau <- c(0.1, 0.5, 0.9)

## --- Univariate regression ---
setup <- lpqr(z ~ x, data=dat)
xgrid <- seq(0, pi, length.out=20)

## Example 1: Kernel smoothing, p=0
yhat <- predict(setup, newdata=data.frame(x=xgrid), p=0, tau=tau)
yhatlong <- reshape2::melt(yhat)
names(yhatlong) <- c("x", "tau", "z")
yhatlong$tau <- tau[yhatlong$tau]
yhatlong$x <- xgrid[yhatlong$x]
ggplot(dat, aes(x, z)) +
  geom_point() +
  geom_line(mapping=aes(group=tau),
            data=yhatlong, colour="red")

## Example 2: p=2
yhat <- predict(setup, newdata=data.frame(x=xgrid), p=2, tau=tau)
yhatlong <- reshape2::melt(yhat)
names(yhatlong) <- c("x", "tau", "z")
yhatlong$tau <- tau[yhatlong$tau]
yhatlong$x <- xgrid[yhatlong$x]
ggplot(dat, aes(x, z)) +
  geom_point() +
  geom_line(mapping=aes(group=tau),
            data=yhatlong, colour="red")

## --- Multivariate regression ---
setup <- lpqr(z ~ x + y, data=dat)
ygrid <- seq(min(y), max(y), length.out=20)
query <- expand.grid(x=xgrid, y=ygrid)

## Example 3: Kernel smoothing, p=0
yhat <- predict(setup, newdata=query, p=0, tau=tau)
head(yhat)

## Example 4: Self-defined local formula
yhat <- predict(setup, newdata=query,
                p = z ~ x + I(x^2) + y, tau=tau)
head(yhat)
}
